library(caret)
data(AlzheimerDisease)
install.package("AppliedPredictiveModeling")
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
train = createDataPartition(diagnosis, p = 0.50,list=FALSE)
test = createDataPartition(diagnosis, p = 0.50,list=FALSE)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData = data.frame(predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(training)
head(training)
hist(Superplasticizer)
hist(training$Superplasticizer)
training$LogSuper <- log10(training$Superplasticizer)
hist(training$LogSuper)
training$LogSuper <- log(training$Superplasticizer)
hist(training$LogSuper)
summary(training$LogSuper)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
head(training)
str(training)
training[grep("IL"),]
training[grep(names,"IL"),]
headings <- c("IL_11","IL_13","IL_16","IL_17E","IL_1alpha","IL_3","IL_4","IL_5","IL_6","IL_6_Receptor","IL_7","IL_8")
training[headings,]
training[,headings]
training[,headings]
smallSet <- training[,headings]
head(smallSet)
prcomp(smallSet)
prcomp$rotation
prComp <- prcomp(smallSet)
prComp$rotation
preProc <- preProcess(smallset,method="pca")
preProc <- preProcess(smallSet,method="pca")
preProc$numComp
summary(preProc)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
headings
str(headings)
rbind(headings,"diagnosis")
rbind(headings,"diagnosis")
headings
str(headings)
headings2 <- rbind(headings,"diagnosis")
headings2
headings2 <- cbind(headings,"diagnosis")
headings2
headings <- c("IL_11","IL_13","IL_16","IL_17E","IL_1alpha","IL_3","IL_4","IL_5","IL_6","IL_6_Receptor","IL_7","IL_8", "diagnosis")
smallSet <- training[,headings]
str(smallSet)
M <- abs(cor(smallSet[,-13]))
diag(M) <- 0
which(M > 0.8, arr.ind=T)
m
M
which(M > 0.8)
which(M > 0.8, arr.ind=T)
preProc <- preProcess(log10(smallSet[,-13]+1, method="pca",pcaComp = 2))
preProc <- preProcess(log10(smallSet[,-13]+1), method="pca",pcaComp = 2))
preProc <- preProcess(log10(smallSet[,-13]+1), method="pca",pcaComp = 2)
preProc <- preProcess(log10(smallSet[,-13]+1), method="pca",pcaComp = 3)
preProc <- preProcess(log10(smallSet[,-13]+1), method="pca",pcaComp = 4)
preProc <- preProcess(log10(smallSet[,-13]+1), method="pca",pcaComp = 5)
preProc <- preProcess(log10(smallSet[,-13]+1), method="pca",pcaComp = 7)
preProc <- preProcess(log10(smallSet[,-13]+1), method="pca",pcaComp = 8)
preProc <- preProcess(log10(smallSet[,-13]+1), method="pca",pcaComp = 9)
preProc <- preProcess(log10(smallSet[,-13]+1), method="pca",pcaComp = 10)
preProc <- preProcess(log10(smallSet[,-13]+1), method="pca",pcaComp = 11)
preProc <- preProcess(log10(smallSet[,-13]+1), method="pca",pcaComp = 12)
preProc <- preProcess(smallSet[,-13]+1, method="pca",pcaComp = 12)
preProc <- preProcess(smallSet[,-13]+1, method="pca",pcaComp = 11)
preProc <- preProcess(smallSet[,-13]+1, method="pca",pcaComp =2)
trainPC <- predict(preProc, smallSet[,-13]+1)
modelFit <- train(smallSet$diagnosis ~ ., method = "glm", data=trainPC)
install.packages("e1071")
modelFit <- train(smallSet$diagnosis ~ ., method = "glm", data=trainPC)
str(smallSet)
preProc <- preProcess(log10(smallSet[,-13]+1),method="pca")
preProc <- preProcess(log10(smallSet[,-13]+1),method="pca",pcaComp=2)
preProc <- preProcess(log10(smallSet[,-13]+1),method="pca",pcaComp=3)
preProc <- preProcess(log10(smallSet[,-13]+1),method="pca",pcaComp=7)
preProc <- preProcess(log10(smallSet[,-13]+1),method="pca",pcaComp=10)
preProc <- preProcess(log10(smallSet[,-13]+1),method="pca",pcaComp=12)
preProc <- preProcess((smallSet[,-13]+1),method="pca",pcaComp=12)
preProc
preProc <- preProcess((smallSet[,-13]+1),method="pca")
preProc
?preProcess
preProc <- preProcess((smallSet[,-13]+1),method="pca", pcaComp=7)
preProc
preProc <- preProcess((smallSet[,-13]+1),method="pca", pcaComp=7)
preProc$dim
preProc$bc
preProc$std
preProc$ranges
preProc$thresh
preProc <- preProcess((smallSet[,-13]+1),method="pca", thresh=0.8)
preProc
trainPC <- predict(preProc, training[,headings])
modelFit <- train(training$diagnosis ~ . , method = "glm", data=trainPC)
testPC <- predict(preProc,testing[,headings])
confusionMatrix(testing$diagnosis, predict(modelFit, testPC))
trainPC2 <- predict(smallSet, training[,headings])
modelFit2 <- train(diagnosis ~ . , data=smallSet, method="glm")
modelFit2
data (mtcars)
lm (mtcars$mpg ~ mtcars$cyl + mtcars$wt)
lm (mtcars$mpg ~ I(1*(mtcars$cyl == 4)))
lm (mtcars$mpg ~ I(1*(mtcars$cyl == 8)))
lm (mtcars$mpg ~ I(1*(mtcars$cyl == 8)) + I(1*(mtcars$cyl == 4)))
summary(lm (mtcars$mpg ~ I(1*(mtcars$cyl == 8)) + I(1*(mtcars$cyl == 4))))$coef
summary(lm (mpg ~ I(1*(cyl == 8)) + I(1*(cyl == 4))), data=mtcars)$coef
summary(lm (mpg ~ I(1*(cyl == 8)) + I(1*(cyl == 4))), data = mtcars))$coef
summary(lm (mpg ~ I(1*(cyl == 8)) + I(1*(cyl == 4)), data = mtcars))$coef
summary(lm (mpg ~ cyl, data = mtcars))$coef
summary(lm (mpg ~ I(1*(cyl == 8)) + I(1*(cyl == 4)) + wt, data = mtcars))$coef
summary(lm (mpg ~ I(1*(cyl == 8) + wt) + I(1*(cyl == 4) + wt), data = mtcars))$coef
summary(lm (mpg ~ (I(1*(cyl == 8)) + I(1*(cyl == 4))), data = mtcars))$coef
summary(lm (mpg ~ (I(1*(cyl == 8)) + I(1*(cyl == 4))) + wt, data = mtcars))$coef
summary(lm (mpg ~ (I(1*(cyl == 4)) + I(1*(cyl == 8))) + wt, data = mtcars))$coef
summary(mtcars)
summary(lm (mpg ~ (I(1*(cyl == 4)) + I(1*(cyl == 8))+I(1*(cyl==6))) + wt, data = mtcars))$coef
mtcars2 <- relevel(mtcars$cyl, "4")
summary(lm(mpg ~ as.factor(cyl)+wt, data=mtcars))
summary(lm(mpg ~ as.factor(cyl)+wt, data=mtcars))$coef
summary(lm(mpg ~ as.factor(cyl), data=mtcars))$coef
summary(lm(mpg ~ (as.factor(cyl)+wt), data=mtcars))$coef
summary(lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars))
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
?hatvalues
fit <- lm (y ~ x)
hatvalues(fit)
plot(fit)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit <- lm (y~x)
dfbetas(fit)
plot(fit)
fit <- lm (mpg ~ factor(cyl) + wt, data=mtcars)
plot(fit)
plot(mpg~factor(cyl))
plot(mpg~factor(cyl), data=mtcars)
plot(mpg~factor(cyl), type="n", data=mtcars)
plot(mpg~factor(cyl), type="l", data=mtcars)
plot(mpg, factor(cyl), type="l", data=mtcars)
plot(mpg ~ wt, col=factor(cyl), type="l", data=mtcars)
plot(mpg ~ wt, col=factor(cyl), data=mtcars)
abline(fit)
abline(fit)
fit2 <- lm (mpg ~ factor(cyl), data=mtcars)
abline(fit2)
summary(fit)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
inTrain <- createDataPartition(y=segmentationOriginal$Case, p=0.7, list=FALSE)
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal [-inTrain,]
set.seed(125)
modFit <- train(Case ~ . method="rpart",data=segmentationOriginal)
modFit <- train(Case ~ ., method="rpart",data=segmentationOriginal)
print(modFit$finalModel)
head(segmentationOriginal)
library(rattle)
install.packages("rattle")
library(rattle)
library(rattle)
fancyRpartPlot(modFit$finalModel)
modFit <- train(Case ~ ., method="rpart",data=segmentationOriginal)
fancyRpartPlot(modFit$finalModel)
modFit <- train(Case ~ ., method="rpart",data=segmentationOriginal)
plot(modFit$finalModel, uniform=TRUE, main="Classification Tree")
text(modFit$finalModel, use.n=TRUE, all=TRUE, cex=0.8)
fancyRpartPlot(modFit$finalModel)
print(modFit$finalModel)
modFit <- train(Case ~ ., method="rpart",data=training)
print(modFit$finalModel)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
inTrain <- createDataPartition(y=segmentationOriginal$Case, p=0.7, list=FALSE)
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
dim(training); dim(testing)
quest <- c(23000,10,2)
quest
quest <- rbind(quest,c(50000,10,100))
quest
quest <- rbind(quest,c(57000,8,100))
quest <- rbind(quest,c(57000,8,100))
rm(quest)
modFit <- train(Case ~ ., method="rpart",data=training)
print(modFit$finalModel)
library(rattle)
fancyRpartPlot(modFit$finalModel)
install.packages("rpart.plot")
fancyRpartPlot(modFit$finalModel)
str(segmentationOriginal$Case)
str(training$Case)
rm (training)
rm (testing)
rm (inTrain)
inTrain <- createDataPartition(y=segmentationOriginal$Case, p=0.7, list=FALSE)
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
modFit <- train(Case ~ .,method="rpart",data=training)
predict(modFit,newdata=testing)
set.seed(125)
modFit <- train(Case ~ .,method="rpart",data=training)
predict(modFit,newdata=testing)
head(segmentationOriginal)
training <- segmentationOriginal[Case=="Train",]
training <- segmentationOriginal[segmentationOriginal$Case=="Train",]
testing <- segmentationOriginal[segmentationOriginal$Case=="Test",]
modFit <- train(class ~ .,method="rpart",data=training)
str(segmentationOriginal$Class)
modFit <- train(Class ~ .,method="rpart",data=training)
fancyRpartPlot(modFit$finalModel)
modFit$finalModel
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
str(olive)
inTrain <- createDataPartition(y=olive$Area,p=0.7,list=FALSE)
training <- olive[inTrain,]
testing <- olive[-inTrain,]
modFit <- train(Area ~ . , method="rpart",data=training)
fancyRpartPlot(modFit$finalModel)
newdata = as.data.frame(t(colMeans(olive)))
predict(modFit,newdata=newdata)
str(olive$Area)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
inTrain <- createDataPartition(y=chd, p=0.7, list=FALSE)
inTrain <- createDataPartition(y=SAheart$chd, p=0.7, list=FALSE)
training <- SAheart[inTrain,]
testing <- SAheart[-inTrain,]
str(training)
modFit <- train(chd ~ age + alcohol + obsesity + tobacco + typea + ldl, data=training, method="glm", family="binomial")
modFit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data=training, method="glm", family="binomial")
summary(modFit$finalModel)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
predict(modFit,training)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
prediction <- predict(modFit,training)
missClass()
missClass(,prediction = prediction)
missClass(values=training,prediction = prediction)
modFit$finalModel
missClass(training,predict(modFit,training))
predict(modFit,training)
missClass(training,prediction)
missClass(prediction, prediction)
missClass(prediction)
missClass(training,prediction)
(prediction > 0.5)*1
/length(prediction)
(prediction > 0.5)*1/length(prediction)
truepred <- sum((prediction > 0.5)*1)
truepred
length(prediction)
100/324
testPred <- predict(modFit,testing)
testPred
sum((testPred > 0.5)*1)
length(testPred)
27/138
testPred >0.5
(testPred >0.5 ) * 1
sum(testPred > 0.5)*1
sum(round(testPred,1) > 0.5)*1
sum(round(testPred,2) > 0.5)*1
sum(round(testPred,3) > 0.5)*1
length(testPred)
27/138
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
str(vowel.test)
vowel.test$y <- factor(vowel.test$y)
vowel.train$y <- factor(vowel.train$y)
str(vowel.test)
modFit <- train (y ~ ., data=vowel.train, method="rf", prox=TRUE)
gbimp <- varImp(modFit)
gbimp
training$chd
summary(modFit)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
str(trainSA)
modFit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data = trainSA, method="lm",family="binomial")
warnings()
warnings()
summary(modFit)
trainPred <- predict(modFit,trainSA)
trainPred
missClass(trainSA$chd,trainPred)
testPred <- predict(modFit,testSA)
missClass(testSA$chd,testPred)
data("mtcars")
str(mtcars)
plot(mpg ~ hp)
plot(mtcars$mpg ~ mtcars$hp)
plot(mtcars$vs ~ mtcars$hp)
str(mtcars$vs)
str(mtcars$am)
str(mtcars$gear)
plot(mtcars$gear ~ mtcars$hp)
plot(mtcars$carb ~ mtcars$hp)
?mtcars
plot (mtcars$qsec ~ mtcars$hp)
plot (mtcars$carb ~ mtcars$cyl)
plot (mtcars$carb ~ mtcars$mpg)
pairs(mtcars)
mtcars2 <- mtcars[,c("mpg","am")]
str(mtcars2)
summary(lm(mtcars2$mpg ~ factor(mtcars2$am)))
x <- factor(mtcars2$am)
y <- mtcars2$mpg
plot(x, resid(lm(y~x)))
abline(h=0)
plot(x,y)
summary(lm(y~x))$sigma
data(mtcars)
summary(mtcars)
str(mtcars)
fit <- lm (mpg ~ ., data=mtcars)
summary(fit)
fit <- lm (mpg ~ am, data=mtcars)
summary(fit)
sumCoef <- summary(fit)$coefficients
sumCoef[1,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[1, 2]
sumCoef[2,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[2, 2]
fit <- lm (mpg ~ factor(am), data=mtcars)
sumCoef <- summary(fit)$coefficients
sumCoef[1,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[1, 2]
sumCoef[2,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[2, 2]
?mtcars
fit <- lm(mpg ~ am, data=mtcars)
plot(fit)
par(mfrow=c(2,2))
plot(fit)
fit2 <- update(fit, mpg~am+cyl, data=mtcars)
fit3 <- update(fit, mpg~ am+cyl+wt, data=mtcars)
anova(fit, fit2, fit3)
fit1 <- lm (mpg ~ am, data=mtcars)
fit2 <- update(fit, mpg ~ am + cyl, data=mtcars)
fit3 <- update(fit, mpg ~ am + cyl + disp, data=mtcars)
fit4 <- update(fit, mpg ~ am + cyl + disp + hp, data=mtcars)
fit5 <- update(fit, mpg ~ am + cyl + disp + hp + drat, data=mtcars)
fit6 <- update(fit, mpg ~ am + cyl + disp + hp + drat + wt, data=mtcars)
fit7 <- update(fit, mpg ~ am + cyl + disp + hp + drat + wt + qsec, data = mtcars)
fit8 <- update(fit, mpg ~ am + cyl + disp + hp + drat + wt + qsec + vs, data=mtcars)
fit9 <- update(fit, mpg ~ am + cyl + disp + hp + drat + wt + qsec + vs + gear, data = mtcars)
fit10 <- update(fit, mpg ~ am + cyl + disp + hp + drat + wt + qsec + vs + gear + carb, data=mtcars)
anova(fit1, fit2, fit3, fit4, fit5, fit6, fit7, fit8, fit9, fit10)
?step
step(lm.D9)
summary(lm1 <- lm(mpg ~ . , data=mtcars))
slm1 <- step(lm1)
summary(slm1)
slm1$anova
slm1 <- stepAIC(lm1)
install.packages("MASS")
slm1 <- stepAIC(lm1)
library(MASS)
slm1 <- stepAIC(lm1)
slm1$anova
slm1 <- stepAIC(lm1, direction = c("both"))
slm1$anova
fit1 <- lm (mpg ~ am, data=mtcars)
fit2 <- update(fit, mpg ~ am + cyl, data=mtcars)
fit3 <- update(fit, mpg ~ am + cyl + disp, data=mtcars)
fit4 <- update(fit, mpg ~ am + cyl + disp + hp, data=mtcars)
fit5 <- update(fit, mpg ~ am + cyl + disp + hp + drat, data=mtcars)
fit6 <- update(fit, mpg ~ am + cyl + disp + hp + drat + wt, data=mtcars)
fit7 <- update(fit, mpg ~ am + cyl + disp + hp + drat + wt + qsec, data = mtcars)
fit8 <- update(fit, mpg ~ am + cyl + disp + hp + drat + wt + qsec + vs, data=mtcars)
fit9 <- update(fit, mpg ~ am + cyl + disp + hp + drat + wt + qsec + vs + gear, data = mtcars)
fit10 <- update(fit, mpg ~ am + cyl + disp + hp + drat + wt + qsec + vs + gear + carb, data=mtcars)
anova(fit1, fit2, fit3, fit4, fit5, fit6, fit7, fit8, fit9, fit10)
fit <- lm (mpg ~ ., data = mtcars)
stepwiseChoosing <- stepAIC(fit)
stepwiseChoosing$anova
finalFit <- lm (mpg ~ wt + qsec + am, data = mtcars)
plot (finalFit)
plot (mpg ~ wt, data=mtcars )
line (mpg, cyl)
line (mpg, cyl, data=mtcars)
line (mtcars$mpg, mtcars$cyl)
library(ggplot2)
ggpairs(mtcars)
install.packages("GGally")
ggpairs(mtcars)
library(GGally)
ggpairs(mtcars)
plot (mpg ~ am)
plot (mpg ~ am, data = mtcars)
boxplot (mpg ~ am)
boxplot (mpg ~ am, data=mtcars)
plot (mpg ~ am, data = mtcars)
plot (am ~ mpg), data = mtcars)
plot (am ~ mpg, data = mtcars)
abline()
plot(mpg ~ wt, data=mtcars)
pairs(mtcars, panel=panel.smooth, main = "Motor Trend Cars Data", col= (3 + mtcars$am))
qqplot(finalFit)
library(ggplot2)
qqplot(finalFit)
finalFit <- lm (mpg ~ wt + qsec + am, data = mtcars)
qqplot(finalFit)
idealFit <- lm (mpg ~ wt + qsec + am, data = mtcars)
par(mfrow=c(2,2))
plot (idealFit)
idealFit$coef
plot(mpg ~ wt, data=mtcars, col=(3 + mtcars$am))
plot(mpg ~ qsec, data=mtcars, col=(3 + mtcars$am))
setwd("~/Coursera/DataProducts")
library(shiny)
runApp()
library(rsconnect)
shinyapps::setAccountInfo(name='sangtani',
token='464976DF628C87EFF5967E26934DBD8E',
secret='<SECRET>')
shinyapps::setAccountInfo(name='sangtani',
token='464976DF628C87EFF5967E26934DBD8E',
secret='XbzjlH0iAD25gipk5P1MLmCAWEiQ2r4eHjDhZ+cr')
shiny::runApp()
setwd("~/Coursera/DataProducts")
library(shiny)
runApp()
shiny::runApp()
shiny::runApp()
install.packages("e1071")
install.packages("e1071")
shiny::runApp()
setwd("~/Coursera/DataProducts/DataProducts")
shiny::runApp()
install_github('slidify','ramnathv')
library(devtools)
install_github('slidify','ramnathv')
install_github('slidifyLibraries','ramnathv')
library(slidifyLibraries)
library(slidify)
install_github('ramnathv/slidfy')
For more details on authoring R presentations click the
**Help** button on the toolbar.
- Bullet 1
- Bullet 2
- Bullet 3
Slide With Code
install.packages('stringi')
install.packages("stringi")
**Help** button on the toolbar.
